version: '2'
services:
  peer-base:
    image: hyperledger/fabric-peer:{{ fabric_pack }}
    environment:
      - CORE_VM_ENDPOINT=unix:///host/var/run/docker.sock
      # the following setting starts chaincode containers on the same
      # bridge network as the peers
      # https://docs.docker.com/compose/networking/
      - CORE_VM_DOCKER_HOSTCONFIG_NETWORKMODE=dockercompose_default
      - CORE_VM_DOCKER_ATTACHSTDOUT=true
      - FABRIC_LOGGING_SPEC=INFO
      - CORE_CHAINCODE_LOGGING_LEVEL=INFO
      - CORE_PEER_GOSSIP_USELEADERELECTION=true
      - CORE_PEER_GOSSIP_ORGLEADER=false
      # The following setting skips the gossip handshake since we are
      # are not doing mutual TLS
      - CORE_PEER_GOSSIP_SKIPHANDSHAKE=true
      - CORE_PEER_MSPCONFIGPATH=/etc/hyperledger/crypto/peer/msp
      - CORE_PEER_TLS_ENABLED=true
      - CORE_PEER_TLS_KEY_FILE=/etc/hyperledger/crypto/peer/tls/server.key
      - CORE_PEER_TLS_CERT_FILE=/etc/hyperledger/crypto/peer/tls/server.crt
      - CORE_PEER_TLS_ROOTCERT_FILE=/etc/hyperledger/crypto/peer/tls/ca.crt
{% if use_couchdb == 'yes' %}
      - CORE_LEDGER_STATE_STATEDATABASE=CouchDB
      - CORE_LEDGER_STATE_COUCHDBCONFIG_COUCHDBADDRESS=couchdb.{{ org }}.{{ domain }}:{{ couchdb_port }}
{% endif %}
    working_dir: /opt/gopath/src/github.com/hyperledger/fabric/peer
    command: peer node start
    volumes:
      - /var/run/:/host/var/run/
    restart: {{ docker_restart_policy }}

  cli-base:
    image: hyperledger/fabric-tools:{{ fabric_pack }}
    tty: true
    environment:
      - GOPATH=/opt/gopath
      - CORE_VM_ENDPOINT=unix:///host/var/run/docker.sock
      - FABRIC_LOGGING_SPEC=INFO
      - CORE_PEER_TLS_ENABLED=true
      - CORE_PEER_MSPCONFIGPATH=/etc/hyperledger/crypto/peer/msp
      - CORE_PEER_TLS_KEY_FILE=/etc/hyperledger/crypto/peer/tls/server.key
      - CORE_PEER_TLS_CERT_FILE=/etc/hyperledger/crypto/peer/tls/server.crt
      - CORE_PEER_TLS_ROOTCERT_FILE=/etc/hyperledger/crypto/peer/tls/ca.crt
    volumes:
      - /var/run/:/host/var/run/
      - {{ fabric_starter_workdir }}/artifacts:/etc/hyperledger/artifacts
      - {{ fabric_starter_workdir }}/chaincode:/opt/chaincode
      - {{ fabric_starter_workdir }}/chaincode/{{ chaincode_lang }}:/opt/gopath/src
    working_dir: /etc/hyperledger/artifacts

  api-base:
    image: dockeraltoros/fabric-rest:{{ fabric_rest_version }}
    restart: {{ docker_restart_policy }}
    volumes:
     - {{ fabric_starter_workdir }}/artifacts:/usr/src/artifacts
# Uncomment this, to map www-client directory to api-server
#     - {{ fabric_starter_workdir }}/www-client:/usr/src/app/www
#     - {{ fabric_starter_workdir }}/middleware:/usr/src/app/middleware
    command: sh -c "npm start"

  www-base:
    image: nginx
    volumes:
      - {{ fabric_starter_workdir }}/www/artifacts:/usr/share/nginx/html

  zookeeper-base:
    image: hyperledger/fabric-zookeeper:{{ fabric_thirdparty_version }}
    restart: {{ docker_restart_policy }}

  kafka-base:
    image: hyperledger/fabric-kafka:{{ fabric_thirdparty_version }}
    restart: {{ docker_restart_policy }}
    environment:
      - KAFKA_MESSAGE_MAX_BYTES=103809024 # 99 * 1024 * 1024 B
      - KAFKA_REPLICA_FETCH_MAX_BYTES=103809024 # 99 * 1024 * 1024 B
      - KAFKA_UNCLEAN_LEADER_ELECTION_ENABLE=false
